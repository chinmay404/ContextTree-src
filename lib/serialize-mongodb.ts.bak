/**
 * Helper utility for serializing MongoDB documents to plain objects
 * Converting ObjectId, Date, and other non-serializable types
 */

/**
 * Serializes a MongoDB document or any object containing MongoDB specific types
 * to a plain JavaScript object that can be safely used with JSON.stringify
 * or passed between server and client components
 */
export function serializeMongoDoc(doc: any): any {
  if (doc === null || doc === undefined) {
    return doc;
  }

  // Direct conversion for primitive types
  if (typeof doc !== "object") {
    return doc;
  }

  // Handle Date objects
  if (doc instanceof Date) {
    return doc.toISOString();
  }

  // Handle MongoDB ObjectId (check both property and instanceof)
  if (
    doc._bsontype === "ObjectID" ||
    doc._bsontype === "ObjectId" ||
    (typeof doc.toString === "function" &&
      doc.constructor &&
      doc.constructor.name === "ObjectId")
  ) {
    return doc.toString();
  }

  // Special handling for objects with toJSON method that aren't supported by React Server Components
  if (
    typeof doc.toJSON === "function" &&
    doc.constructor &&
    doc.constructor.name !== "Date"
  ) {
    // Convert the object to a plain object by removing the toJSON method
    const plainObj = { ...doc };
    delete plainObj.toJSON;
    return serializeMongoDoc(plainObj);
  }

  // Special handling for Buffer objects (which might be in _id fields)
  if (Buffer.isBuffer(doc) || (doc.buffer && doc.subarray && doc.byteLength)) {
    return doc.toString("hex");
  }

  // Handle arrays
  if (Array.isArray(doc)) {
    return doc.map((item) => serializeMongoDoc(item));
  }

  // Handle plain objects and MongoDB documents
  const serialized: any = {};
  for (const [key, value] of Object.entries(doc)) {
    // Special handling for MongoDB _id field
    if (key === "_id") {
      if (value === null || value === undefined) {
        // Skip null/undefined _id
        continue;
      } else if (typeof value === "object" && value._bsontype) {
        // ObjectId case
        serialized[key] = value.toString();
      } else if (typeof value === "object" && value.buffer) {
        // Binary/Buffer case (sometimes _id is a buffer)
        serialized[key] =
          typeof value.toString === "function"
            ? value.toString("hex")
            : JSON.stringify({
                type: "buffer",
                data: [...new Uint8Array(value.buffer)],
              });
      } else {
        // Regular case - serialize recursively
        serialized[key] = serializeMongoDoc(value);
      }
    } else {
      // All other fields - serialize recursively
      serialized[key] = serializeMongoDoc(value);
    }
  }

  return serialized;
}

/**
 * Specialized function to handle collections of MongoDB documents
 * @param docs Array of MongoDB documents or query results
 * @returns Array of serialized plain objects
 */
export function serializeCollection(docs: any[]): any[] {
  if (!Array.isArray(docs)) {
    return [];
  }

  return docs.map((doc) => serializeMongoDoc(doc));
}

/**
 * Helper to asynchronously process and serialize MongoDB cursor results
 * @param cursor MongoDB cursor from find() operation
 * @returns Promise resolving to array of serialized documents
 */
export async function serializeCursorResults(cursor: any): Promise<any[]> {
  try {
    const docs = await cursor.toArray();
    return serializeCollection(docs);
  } catch (error) {
    console.error("Error serializing cursor results:", error);
    return [];
  }
}

/**
 * Final sanitization step for client components - ensures all objects
 * are fully serializable without any MongoDB-specific types
 */
export function safeSerializeForClient(obj: any): any {
  try {
    // First use our custom serializer
    const serialized = serializeMongoDoc(obj);

    // Then do a JSON round-trip to catch any remaining non-serializable objects
    return JSON.parse(JSON.stringify(serialized));
  } catch (error) {
    console.error("Error in safeSerializeForClient:", error);
    // Fallback to prevent breaking
    return { error: "Serialization error", message: (error as Error).message };
  }
}

/**
 * Clean and serialize objects for Next.js data passing
 * @param obj Any object that might contain MongoDB specific types
 * @returns A plain JavaScript object safe for serialization
 */
export function cleanForNextJs(obj: any): any {
  // For full safety, serialize then parse to guarantee a plain object
  return safeSerializeForClient(obj);
}

/**
 * Safely serializes MongoDB cursor results into a client-safe format
 * @param cursor MongoDB cursor or array result
 * @returns Array of serialized documents safe to pass to client components
 */
export async function serializeCursorResults(cursor: any): Promise<any[]> {
  // Handle already resolved array
  if (Array.isArray(cursor)) {
    return serializeCollection(cursor);
  }

  // Handle MongoDB cursor
  if (cursor && typeof cursor.toArray === "function") {
    const results = await cursor.toArray();
    return serializeCollection(results);
  }

  // Handle unexpected input
  return [];
}

/**
 * Final sanitization step for client components - ensures all objects
 * are fully serializable without any MongoDB-specific types
 */
export function safeSerializeForClient<T>(result: T): T {
  if (result === null || result === undefined) {
    return result;
  }

  // Deep serialize using our utility then parse to guarantee clean objects
  try {
    const serialized = serializeMongoDoc(result);

    // Additional safety step for Objects with non-standard prototypes
    if (typeof serialized === "object" && serialized !== null) {
      // Convert to string and back to ensure we lose any problematic prototype chains
      return JSON.parse(JSON.stringify(serialized));
    }

    return serialized as T;
  } catch (error) {
    console.error("Error serializing MongoDB result:", error);
    // Fallback to JSON stringify/parse
    return JSON.parse(JSON.stringify(result));
  }
}

/**
 * Higher-order function to wrap server actions and automatically serialize MongoDB results
 * @param serverAction Any server action function that might return MongoDB objects
 * @returns A wrapped server action that safely serializes all MongoDB objects in results
 */
export function withMongoSerialization<
  T extends (...args: any[]) => Promise<any>
>(
  serverAction: T
): (...args: Parameters<T>) => Promise<Awaited<ReturnType<T>>> {
  return async function (
    ...args: Parameters<T>
  ): Promise<Awaited<ReturnType<T>>> {
    const result = await serverAction(...args);
    return safeSerializeForClient(result);
  };
}

/**
 * Safely checks if an object is a MongoDB document by looking for typical MongoDB properties
 */
export function isMongoDocument(obj: any): boolean {
  if (!obj || typeof obj !== "object") return false;

  // Check for common MongoDB document indicators
  const hasMongoId = obj._id !== undefined;
  const hasBsonType = obj._bsontype !== undefined;
  const hasToJSON = typeof obj.toJSON === "function";

  return hasMongoId || hasBsonType || hasToJSON;
}
